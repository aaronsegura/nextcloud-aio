"""Implement the Nextcloud Login Flow v2.

This will allow your application to:

    * Use an app token to log in as a user
    * Check for Remote Wipe status (see api.wipe)

Using an app token for authorization will allow the user to:

    * Have the ability to disable access for your application
    * Signal your application to wipe all of its data (see api.wipe)

Reference:
    https://docs.nextcloud.com/server/latest/developer_manual/client_apis/LoginFlow/index.html
"""

import asyncio

import datetime as dt

from typing import Dict, Any

from nextcloud_async.exceptions import NextcloudLoginFlowTimeoutError, NextcloudNotFoundError
from nextcloud_async.driver import NextcloudModule, NextcloudBaseApi, NextcloudOcsApi
from nextcloud_async.client import NextcloudClient


class LoginFlowV2(NextcloudModule):
    """Obtain an app password after user web authorization.

    Simply:
        > login_flow = await ncc.login_flow_initiate()
        > print(login_flow['login'])   # Direct user to open the provided URL
        > token = login_flow['poll']['token']
        > results = await ncc.login_flow_wait_confirm(token, timeout=60))
        > print(results['appPassword'])

    You may then use `appPassword` to log in as the user with your application.
    """
    def __init__(
            self,
            client: NextcloudClient,
            api_version: str = '2') -> None:
        self.client = client
        self.api = NextcloudBaseApi(client)
        self.stub = f'login/v{api_version}'

    async def initiate(self) -> Dict[str, Any]:
        """Initiate login flow v2.

        Returns:
            Dict: Containing the user login URL and your temporary token for polling
            results.
        """
        response = await self._post(path=self.stub)
        return response

    async def wait_confirm(self, token: str, timeout: int = 60) -> Dict[str, Any]:
        """Wait for user to confirm application authorization.

        This function may be called repeatedly until the user accepts.

        Args:
            token (str): The temporary token provided by login_flow_initiate()

            timeout (int, optional): How long to wait for user authorization. Defaults to
            60 seconds.

        Raises:
            NextcloudLoginFlowTimeout: When the user hasn't logged in by the given
            timeout.

        Returns:
            Dict: Your new credentials.
        """
        start_dt = dt.datetime.now()  # noqa: DTZ005
        running_time = 0
        response = None

        while not response and running_time < timeout:
            try:
                response = await self._post(
                    path=f'{self.stub}/poll',
                    data={'token': token})
            except NextcloudNotFoundError:
                pass

            running_time = (dt.datetime.now() - start_dt).seconds  # noqa: DTZ005
            await asyncio.sleep(1)

        if not response:
            raise NextcloudLoginFlowTimeoutError()

        return response

    async def destroy_token(self) -> None:
        """Delete an app password generated by Login Flow v2.

        You must currently be logged in using the app password.

        Returns:
            Empty 200 Response
        """
        # This requires OCS api
        ocs_api = NextcloudOcsApi(self.client, ocs_version='2')
        await ocs_api.delete(path='/core/apppassword')
