"""Implement the Nextcloud Login Flow v2.

This will allow your application to:

    * Use an app token to log in as a user
    * Check for Remote Wipe status (see api.wipe)

Using an app token for authorization will allow the user to:

    * Have the ability to disable access for your application
    * Signal your application to wipe all of its data (see api.wipe)

Reference:
    https://docs.nextcloud.com/server/latest/developer_manual/client_apis/LoginFlow/index.html
"""

import asyncio
import httpx

from importlib.metadata import version

import datetime as dt

from typing import Dict, Hashable, Any

from nextcloud_async.exceptions import NextcloudLoginFlowTimeout

from nextcloud_async.api.base import NextcloudBaseApi
from nextcloud_async.client import NextcloudClient

__VERSION__ = version('nextcloud_async')


class LoginFlowV2:
    """Obtain an app password after user web authorization.

    Simply:
        > login_flow = await ncc.login_flow_initiate()
        > print(login_flow['login'])   # Direct user to open the provided URL
        > token = login_flow['poll']['token']
        > results = await ncc.login_flow_wait_confirm(token, timeout=60))
        > print(results['appPassword'])

    You may then use `appPassword` to log in as the user with your application.
    """

    sub = '/index.php/login/v2'

    def __init__(
            self,
            client: NextcloudClient) -> None:
        self.api = NextcloudBaseApi(client)


    async def initiate(self) -> Dict[Hashable, Any]:
        r"""Initiate login flow v2.

        Returns
        -------
            Dict: Containing the user login URL and your temporary token for polling results.

            Example:

            {

                "poll":{

                    "token":"mQU...c6k8Wrs1",

                    "endpoint":"https:\/\/cloud.example.com\/login\/v2\/poll"
                },

                "login":"https:\/\/cloud.example.com\/login\/v2\/flow\/guyjG...YFg"

            }

        """
        response = await self.api.post(sub=self.sub)
        return response.json()

    async def wait_confirm(self, token: str, timeout: int = 60) -> Dict[Hashable, Any]:
        r"""Wait for user to confirm application authorization.

        Args
        ----
            token (str): The temporary token provided by login_flow_initiate()

            timeout (int, optional): How long to wait for user authorization. Defaults to
            60 seconds.

        Raises
        ------
            NextcloudLoginFlowTimeout: When the user hasn't logged in by the given timeout.
            This function may be called repeatedly until the user accepts.

        Returns
        -------
            Dict: Your new credentials.

            Example:

            {

                "server":"https:\/\/cloud.example.com",

                "loginName":"username",

                "appPassword":"yKTVA4zgx...olYSuJ6sCN"
            }

        """
        start_dt = dt.datetime.now()
        running_time = 0

        response = await self.api.post(
                        sub='/login/v2/poll',
                        data={'token': token})

        while response.status_code == 404 and running_time < timeout:
            print("LOOPTID")
            running_time = (dt.datetime.now() - start_dt).seconds
            await asyncio.sleep(1)

            response = await self.api.post(
                            sub='/login/v2/poll',
                            data={'token': token})

        if response.status_code == 404:
            raise NextcloudLoginFlowTimeout()

        return response.json()

    # TODO: Move this to another module
    async def destroy_token(self) -> bool:
        """Delete an app password generated by Login Flow v2.

        You must currently be logged in using the app password.

        Returns
        -------
            Empty 200 Response

        """
        # This reuqires OCS api
        response = await self.api.request(
            method='DELETE',
            sub='/ocs/v2.php/core/apppassword')

        if response.status_code == 200:
            return True
        else:
            return False
